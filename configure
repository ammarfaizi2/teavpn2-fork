#!/bin/sh
#
# SPDX-License-Identifier: GPL-2.0-only
#
# Copyright (C) 2023  Ammar Faizi <ammarfaizi2@gnuweeb.org>
#
# Inspired by liburing's configure script.
#

set -e;

cc=${CC:-cc};
cxx=${CXX:-c++};
ld=${LD:-$cxx};
build_dir=${O:-$(dirname $(realpath $0))};

for opt do
	optarg=$(expr "x$opt" : 'x[^=]*=\(.*\)' || true);
	case "$opt" in
	--help|-h)
		show_help=yes;
	;;
	--build-dir=*)
		build_dir="$optarg";
	;;
	--prefix=*)
		prefix="$optarg";
	;;
	--mandir=*)
		mandir="$optarg";
	;;
	--cc=??*)
		cc="$optarg";
	;;
	--cxx=*)
		cxx="$optarg";
	;;
	--lto)
		use_lto="yes";
	;;
	--gui)
		use_gui="yes";
	;;
	--debug)
		use_debug="yes";
	;;
	*)
		echo "ERROR: unknown option $opt";
		echo "Try '$0 --help' for more information";
		exit 1;
	;;
	esac;
done

if test "$show_help" = "yes"; then
cat <<EOF

Usage: ./configure [options]

Options: [defaults in brackets after descriptions]
  --help                   Print this message
  --build-dir=PATH         Set build output in PATH [$build_dir]
  --prefix=PATH            Install in PATH [$prefix]
  --includedir=PATH        Install headers in PATH [$includedir]
  --libdir=PATH            Install runtime libraries in PATH [$libdir]
  --libdevdir=PATH         Install development libraries in PATH [$libdevdir]
  --mandir=PATH            Install man pages in PATH [$mandir]
  --datadir=PATH           Install shared data in PATH [$datadir]
  --cc=CMD                 Use CMD as the C compiler
  --cxx=CMD                Use CMD as the C++ compiler
  --lto                    Compile with link-time optimization
  --gui                    Add the GUI support
  --debug                  Build with debug enabled
EOF
exit 0;
fi

if test -z "$prefix"; then
	prefix=/usr;
fi

if test -z "$mandir"; then
	mandir="$prefix/man";
fi

mkdir -p "${build_dir}";
build_dir="$(realpath -e "${build_dir}")";

tmp_dir="${build_dir}/.tmp";
tmp_o="${tmp_dir}/tmp.o";
tmp_c="${tmp_dir}/tmp.c";
tmp_cpp="${tmp_dir}/tmp.cpp";
tmp_exe="${tmp_dir}/tmp.exe";

mkdir -p "${tmp_dir}";
rm -f "${build_dir}/config.log";

config_make="${build_dir}/config.make";
config_log="${build_dir}/config.log";
config_h="${build_dir}/config.h";

# NB: do not call "exit" in the trap handler; this is buggy with some shells;
# see <1285349658-3122-1-git-send-email-loic.minier@linaro.org>
trap "rm -rf \"${tmp_dir}\"" EXIT INT HUP QUIT TERM;

fatal()
{
	echo $@;
	echo "Configure failed, check config.log and/or the above output";
	rm -f "${config_make}";
	rm -f "${config_h}";
	exit 1;
}

# Print result for each configuration test
print_config()
{
	printf "  %s %s\n" "$1" "$2";
}

# Append a string to $config_h.
p_conf_h()
{
	printf "$@" >> "${config_h}";
}

# Append a string to $config_make.
p_conf_make()
{
	printf "$@" >> "${config_make}";
}

do_cc()
{
	# Run the compiler, capturing its output to the log.
	echo "${cc}" "$@" >> $config_log;
	"${cc}" "$@" >> $config_log 2>&1 || return $?;
	return 0;
}

do_cxx()
{
	# Run the compiler, capturing its output to the log.
	echo "${cxx}" "$@" >> $config_log;
	"${cxx}" "$@" >> $config_log 2>&1 || return $?;
	return 0;
}

compile_cc()
{
	local_ccflags="$1";
	local_ldflags="$2";
	printf "\n\nCompiling test case %s:\n" "$3" >> $config_log;
	do_cc -o "${tmp_o}" -c "${tmp_c}" ${local_ccflags} ${local_ldflags};
}

compile_cxx()
{
	local_cxxflags="$1";
	local_ldflags="$2";
	printf "\n\nCompiling test case %s:\n" "$3" >> $config_log;
	do_cxx -o "${tmp_o}" -c "${tmp_cpp}" ${local_cxxflags} ${local_ldflags};
}

# Same as compile_cxx, but also link the object file (without -c).
compile_cxx_and_link()
{
	local_cxxflags="$1";
	local_ldflags="$2";
	printf "\n\nCompiling test case %s:\n" "$3" >> $config_log;
	do_cxx -o "${tmp_o}" "${tmp_cpp}" ${local_cxxflags} ${local_ldflags};
}

has_cflag()
{
	printf "%s\n" "int main(void) { return 0; }" > $tmp_c;
	compile_cc "-Werror $1" "" "$1" || return $?;
	return 0;
}

has_cxxflag()
{
	printf "%s\n" "int main(void) { return 0; }" > $tmp_cpp;
	compile_cxx "-Werror $1" "" "$1" || return $?;
	return 0;
}

has_ldflag()
{
	printf "%s\n" "int main(void) { return 0; }" > $tmp_c;
	printf "\n\nCompiling test case %s:\n" "$1" >> $config_log;
	compile_cxx_and_link "" "$1" "$1" || return $?;
	return 0;
}

add_cflag()
{
	if has_cflag $1; then
		ret=0;
		support="y";
		CFLAGS="$1 ${CFLAGS}";
	else
		ret=1;
		support="n";
	fi;

	print_config "CC  has ${1}:" "${support}";
	return $ret;
}

add_cxx_flag()
{
	if has_cxxflag $1; then
		ret=0;
		support="y";
		CXXFLAGS="$1 ${CXXFLAGS}";
	else
		ret=1;
		support="n";
	fi;

	print_config "CXX has ${1}:" "${support}";
	return $ret;
}

add_ldflag()
{
	if has_ldflag $1; then
		ret=0;
		support="y";
		LDFLAGS="$1 ${LDFLAGS}";
	else
		ret=1;
		support="n";
	fi;

	print_config "LD  has ${1}:" "${support}";
	return $ret;
}

add_c_and_cxx_flag()
{
	add_cflag $1;
	add_cxx_flag $1;
}

enable_config()
{
	p_conf_make "%s = y\n" "$1";
	printf "#define %s\n" "$1" >> "${config_h}";
}

# Default flags.
CXXFLAGS="-O2 -D_GNU_SOURCE -include ${build_dir}/config.h";
CFLAGS="-O2 -D_GNU_SOURCE -include ${build_dir}/config.h";
LDFLAGS="-O2";
LIB_LDFLAGS="-lpthread";

rm -f "${config_h}" "${config_make}";

# Print configure header at the top of $config_h.
p_conf_h "/*\n";
p_conf_h " * Automatically generated by configure\n";
p_conf_h " *\n";
p_conf_h " * Configured with:";
p_conf_h " '%s'" "$0" "$@";
p_conf_h "\n";
p_conf_h " *\n";
p_conf_h " */\n";

# Print configure header at the top of $config_make.
p_conf_make "#\n";
p_conf_make "# Automatically generated by configure\n";
p_conf_make "#\n";
p_conf_make "# Configured with:";
p_conf_make " '%s'" "$0" "$@";
p_conf_make "\n";
p_conf_make "#\n";

# Don't exit if add_c_and_cxx_flag calls return non-zero.
set +e;

printf "\n%s:\n" "-W flags";
add_c_and_cxx_flag "-Wall";
add_c_and_cxx_flag "-Wextra";
add_c_and_cxx_flag "-Wsequence-point";
add_c_and_cxx_flag "-Wunreachable-code";
add_c_and_cxx_flag "-Wunreachable-code-loop-increment";
add_c_and_cxx_flag "-Wformat-signedness";
add_c_and_cxx_flag "-Wformat-security";
add_c_and_cxx_flag "-Wformat";
add_c_and_cxx_flag "-Wstack-usage=4096";
add_c_and_cxx_flag "-Wmissing-prototypes";
add_c_and_cxx_flag "-Wstrict-prototypes";
add_c_and_cxx_flag "-Wmissing-variable-declarations";
add_c_and_cxx_flag "-Wstrict-aliasing=3";
add_c_and_cxx_flag "-Wshorten-64-to-32";
add_c_and_cxx_flag "-Wunsafe-loop-optimizations";

printf "\n%s:\n" "-f flags";
add_c_and_cxx_flag "-fno-stack-protector";
add_c_and_cxx_flag "-fdata-sections";
add_c_and_cxx_flag "-ffunction-sections";
add_c_and_cxx_flag "-fno-strict-aliasing";
add_c_and_cxx_flag "-fvisibility=hidden";

# Append -flto if $use_lto is set.
if [ -n "${use_lto}" ]; then
	add_c_and_cxx_flag "-flto" && c_and_cxx_support_lto="y" || c_and_cxx_support_lto="n";
fi;

printf "\n%s:\n" "Misc flags";
add_c_and_cxx_flag "-ggdb3" && LDFLAGS="-ggdb3 ${LDFLAGS}";
add_ldflag "-rdynamic";

if [ -n "${use_lto}" ]; then
	add_ldflag "-flto";
fi;

# Bring it back!
set -e;
p_conf_make "CC = %s\n" "${cc}";
p_conf_make "CXX = %s\n" "${cxx}";
p_conf_make "LD = %s\n" "${ld}";
p_conf_make "CFLAGS = %s\n" "${CFLAGS}";
p_conf_make "CXXFLAGS = %s\n" "${CXXFLAGS}";
p_conf_make "LDFLAGS = %s\n" "${LDFLAGS}";
p_conf_make "LIB_LDFLAGS = %s\n" "${LIB_LDFLAGS}";

enable_config "CONFIG_TEAVPN_SERVER";
enable_config "CONFIG_TEAVPN_CLIENT";
enable_config "CONFIG_LINUX";
